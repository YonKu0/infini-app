variant: fcos
version: 1.6.0

passwd:
  users:
    - name: infini-ops
      groups: [sudo, docker]
      home_dir: /home/infini-ops
      shell: /bin/bash
      ssh_authorized_keys:
        # SSH public key for infini-ops user
        - ssh-ed25519 [YOUR_PUBLIC_KEY] infini-ops@infini-app

storage:
  files:
    # Script to assign random static IP on first boot
    - path: /usr/local/bin/set-random-ip.sh
      mode: 0755
      user:
        name: infini-ops
      contents:
        local: set-random-ip.sh

    # Configure Zincati’s maintenance window
    - path: /etc/zincati/config.d/maintenance.toml
      mode: 0644
      contents:
        inline: |
          [updates]
          time_zone = "UTC"
          # Poll for new commits every hour
          check_interval = "1h"
          # Only reboot between 02:00–03:00 UTC
          reboot = "02:00/03:00"

systemd:
  units:
    # 1. Layer required packages and reboot on first boot
    - name: rpm-ostree-install.service
      enabled: true
      contents: |
        [Unit]
        Description=Layer firewalld and podman-compose via rpm-ostree
        ConditionFirstBoot=yes
        Wants=network-online.target
        After=network-online.target

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/rpm-ostree install -y firewalld podman-compose
        ExecStartPost=/usr/bin/systemctl reboot --no-wall
        RemainAfterExit=yes
        StandardOutput=journal
        StandardError=journal

        [Install]
        WantedBy=multi-user.target

    # 2. Assign random static IP (first boot only)
    - name: set-random-ip.service
      enabled: true
      contents: |
        [Unit]
        Description=Set random static IP on first boot only
        ConditionFirstBoot=yes
        Wants=network-online.target NetworkManager-wait-online.service
        After=network-online.target NetworkManager-wait-online.service

        [Service]
        Type=oneshot
        ExecStartPre=/usr/bin/nm-online -q --timeout=30
        ExecStart=/usr/local/bin/set-random-ip.sh
        TimeoutStartSec=60
        RemainAfterExit=yes
        StandardOutput=journal
        StandardError=journal

        [Install]
        WantedBy=multi-user.target

    # 3. Open firewall ports (runs every boot, not just first boot)
    - name: open-required-ports.service
      enabled: true
      contents: |
        [Unit]
        Description=Open firewall ports 80, 443, 9090 for HTTP, HTTPS, and web app
        ConditionPathExists=/usr/bin/firewall-cmd
        After=firewalld.service network-online.target
        Wants=firewalld.service

        [Service]
        Type=oneshot
        ExecStartPre=/usr/bin/test -x /usr/bin/firewall-cmd
        ExecStart=/usr/bin/firewall-cmd --permanent --add-port=80/tcp
        ExecStart=/usr/bin/firewall-cmd --permanent --add-port=443/tcp
        ExecStart=/usr/bin/firewall-cmd --permanent --add-port=5050/tcp
        ExecStart=/usr/bin/firewall-cmd --permanent --add-port=9090/tcp
        ExecStartPost=/usr/bin/firewall-cmd --reload
        RemainAfterExit=yes

        [Install]
        WantedBy=multi-user.target

    # 4. Enable Docker daemon (will activate when present)
    - name: docker.service
      enabled: true
